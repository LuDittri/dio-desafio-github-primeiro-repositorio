- PENSAMENTO COMPUTACIONAL: 
    • Processo de pensamentos envolvido na expressão de soluções em passos computacionais ou algoritmos que podem ser implementados no computador.
    • Reforça o passo a passo de definir instruções para a resolução de problemas;
    • Processo sistemático e eficiente de formulação e resolução de problemas que um humano ou uma máquina sejam capazes de resolver.
    • O pensamento computacional é uma habilidade generalista,  ele é baseado em 4 pilares: Decomposição, reconhecimento de padrões, abstração e design de algoritmos;
        • Decomposição: Dividir um problema complexo em subproblemas, separando por prioridades;
        • Reconhecimento de padrões: Identificar padrões ou tendências que possuam similaridade e diferenças entre os problemas;
        • Abstração: Extrapolar o conceito do problema para uma forma generalista;
        • Design de algoritmos: Define o passo a passo a solução do problemas  (automatiza-la)
    • Processo contínuo de resoluções de problemas: Definir uma solução através dos pilares acima, testar a solução e aperfeiçoar a solução encontrada (Refinar o algoritmo, sempre com o pensamento de que nunca está perfeito);
    • Competências que se adquire utilizando o pensamento computacional:
        • Pensamento sistemático;
        • Colaboração dentro da equipe;
        • Criatividade e design;
        • Facilitador.

- HABILIDADES COMPLEMENTARES: Raciocínio lógico e aperfeiçoamento, estão atreladas ao tipo de pensamento que temos que desenvolver lidando com resolução de problemas;
    • Raciocínio lógico: é uma forma de pensamento estruturado, ou raciocínio, que permite encontrar a conclusão ou determinar a resolução de um problema. Ele é desenvolvido com treinamento e prática, não somente com teoria.
    • Aperfeiçoamento: Ato de aperfeiçoar, a partir de uma soluçã, determinar pontos de melhora e refinamento, onde é possível por exemplo:
        • Ter um melhor uso de recursos, assim encontrando soluções eficientes e otimizando recursos.
        • Melhorando códigos e algoritmos, simplificando linhas de códigos e funções bem definidas;

- DECOMPOSIÇÃO: Primeiro passo da resolução de problemas dentro do conceito de pensamento computacional é quebrá-lo em problemas menores, focando em problemas mais fáceis e gerenciáveis.
    • Análise: Primeira estratégia é necessário analisar o problema estudando e explorando ele, encontrando as partes principais, quebra o problema maior e então examina os problemas menores;
    • Síntese: Combinar os elementos recompondo o problema original, recompondo/unindo de maneira períódica e coerente para entender cada detalhe deste problemas, dando sentido a solução;
    • As tarefas menores podem ser executadas de diversas maneiras, como por exemplo: em fila (maneira sequencial) ou em paralelo (tarefas feitas ao mesmo tempo fazendo com mais eficiência e menos tempo);
    • A decomposição é feita da seguinte maneira: Identificar ou coletar dados, agregar os dados e verificar a funcionalidade da resolução do problema;

- RECONHECIMENTO DE PADRÕES: Pode ser um modelo base, repetição ou estrutura invariante, onde pode ocorrer uma variação mas existe um modelo de referência para reconhecer padrões;
    • Isto pode ocorrer através de detecção de similaridades e diferenças;
    • Por que determinar padrões? Pois é possível generalizar problemas com objetivo de obter resolução para problemas diferentes, é possível determinar isso através de classes e categorias, assim dependendo do grau de similaridade (Grupos conhecidos X Objetos desconhecidos), representando atributos para que a máquina consiga aprender através de um conceito associado ao objeto, armazenar os dados e após definir regras de decisão é possível padronizar;

- ABSTRAÇÃO: Abstrair é observar, um ou mais elementos, avaliando características e propriedades em separado, abstração é extrapolar um processo intelectual de isolamento de um objeto da realidade;
    • Generalização: é a operação intelectual que consiste em reunir numa classe geral, um conjunto de seres ou fenômenos similares;
    • Para classificar uma classe é necessário identificar as características, pontos essenciais e após isso generalizar e detalhar;

- ALGORITMOS: Processo de resolução de problemas "Step by step" utilizando instruções;
    • Para a criação de um programa se faz necessário seguir 3 etapas, sendo elas:
        • Análise: Estudo e definição dos dados de entrada e saída;
        • Algoritmo: Descrever o problema por meio de ferramentas narrativas, fluxogramas ou pseudocódigos;
        • Codificação: O Algoritmo é codificado de acordo com a linguagem de programação escolhida;
    • Assim um algoritmo é uma sequência de passos com objetivo definido, onde ocorre execução de tarefas específicas e um conjunto de operações que resultam em uma sucessão finita de ações;
    • Como construir um algoritmo:
        • Compreensão do problema; (pontos mais importantes)
        • Definição dos dados de entrada; (Dados fornecidos e cenário)
        • Definir processamento; (Cálculos e restrições)
        • Definir dados de saída; (Após processamento)
        • Utilizar um método de construção; (Construção e refinamento do algoritmo)
        • Teste e diagnóstico.
    
LÓGICA DE PROGRAMAÇÃO: 
    • O que é lógica: Operação intelectual ou forma de pensamento estruturada que te auxilia a determinar o que é verdadeiro ou não dentro de um contexto. Organização coesa, forma de raciocínio que ordena fatos;
    • Na programação a lógica é uma organização e planejamento de instruções, normalmente em algoritmos para implementar um programa; 

    • Técnicas para trabalhar a lógica:
        • Técnica linear (Modelo tradicional): técnica hierárquica, execução sequenciada de uma série de operações de maneira ordenada que possuem dependências entre si;
        • Técnica estruturada: técnica com uma estrutura que possui decisões a serem tomadas para avançar com a ideia, possuindo assim mais de um caminho a se seguir;
        • Técnica modular: definição de partes independentes que são contraladas por um conjunto de regras, assim a lógica e dividida em diversas lógicas pequenas com regras específicas;

ALGORITMOS:
    • A função do computador é receber e processar dados e a partir de instruções dadas pelo programador o computador realiza a operação;
    • Tipos de dados: Númericos (Inteiros ou reais), Caracteres (Qualquer tipo de letra ou número) e Lógico (Booleano - 0 ou 1, Falso ou verdadeiro);
    • Variável: tipo de estrutura mutável, que pode variar dentro de seu valor, pode receber mais de um valor e modificar seu conteúdo;
    • Uma variável pode ter papéis diferente, existem dois tipos: O de ação que modifica o estado dessa variável e o de controle que é vigiada, analisada para realizar ações com outras variáveis
    • Constante: Tipo de dado que não pode ser alterado, imutável;

    Instruções primitivas: Determinam as ações para manipular os dados.
    • Operadores: Unário ou Binário, são tipos de instruções que podem ser feitas com os dados, como Divisão, Adição, Subtração, etc, Onde esses operadores possuem o nivel de prioridade como na matemática;
    • Entrada, processamento e saída de dados sempre devem ocorrer em um algoritmo;

    Estrutura condicional: Dada uma condição que foi satisfeita é executada uma operação, existem 3 tipos de estrutura condicional:
        • Simples: Se não cumprir a condição não ocorre a operação;
        • Composta: Se não cumprir a condição irá ocorrer uma exceção (Estrutura SE);
        • Encadeada: Se não cumprir a condição, terá outra condição e se não cumprir novamente terá uma exceção (Estrutura SE SENÃO)
        • Nessa estrutura temos operadores relacionais, como: Igual, diferente, maior que, menor que, igual ou menor a, etc.
        • Também temos os operadores lógicos, que são elas:
            • AND: Quando todas as condições devem ser satisfeitas;
            • OR: Apenas uma condição deve ser verdadeira para realizar a operação;
            • NOT: operador de inversão, inverte o resultado lógico da condição ou operação;

    Vetores e matrizes:
        • Vetor: é caracterizado por uma variavel dimensionada com um tamanho pré-fixado
        • Matriz: é uma tabela organizada em linhas em colunas. onde M é número de linhas na horizontal e N número de colunas vertical

    Funções: ou Sub-rotinas, são blocos de instruções que realizam tarefas específicas que podem ser chamado dentro do código principal, são identificados por nomes e parâmetros.
        • Modularização do programa: Código fica mais claro e conciso, tem reutilizações de códigos, essas seriam vantagens do uso de funções na programação;
    
    Instruções de entrada e saída: Consiste na inserção e recebimento de dados do mundo real por meio de ação de alguma interface, seja teclado, mouse, arquivos, entre outros. 
        • Saída: Impressão dos dados do mundo abstrato, digital por meio de ação de alguma interface, os formatos podem variar de bytes até arquivos, em banco de dados. Existem dois tipos de saida dentro de um programa: Saída programada (Saída incondicional ou condicional, já calculada pelo algoritmo) e saída por interrupção (Definida pelos periféricos, ocorre algo dentro do ambiente computacional que interrompe o programa e imprime saída)

    COMO O COMPUTADOR ENTENDE O PROGRAMA:
        • Tradução: Existe um processo de tradução do amontoado de palavras que seria o código a ser interpretado pelo computador, para isso é utilizado um compilador que transforma essa linguagem de alto nível em um código que a máquina/computador irá entender (Assembly) e assim será executado esse programa (No caso isso seria a tradução do código para o computador entender); (C++, Java)
        • Interpretação: Programa fonte executa diretamente no computador; (JavaScript, Python, Ruby)

    CARACTERÍSTICAS DE UM PROGRAMA:
        • Diretrizes: Legibilidade (Ser um código légivel), Redigibilidade (Bem escrito), Confiabilidade (Execute o que se compromete a fazer) e Custo (Baixo Custo);
            • Legibilidade: Facilidade de leitura, Compreensão, Ortogonalidade e Definição adequada das estruturas. (Coerência nas instruções);
            • Redigibilidade: Simples escrita, possível de se reutilzar, boa expressividade (Utilizar-se de instruções, estruturas que sejam de fácil entendimento);
            • Confiabilidade: Faz o que foi programado para fazer, ser compatível entre compiladores;
            • Custo: Código eficiente, cuidados com custos para treinamentos sobre esse código, codificação, compilação, execução e a infra-estrutura que será utilizada para esse código funcionar;
        • Verificar atualizações, se esse código pode se utilizar IA, disponibilidade de utilizar-se de outras ferramentas, como ele se adaptaria ao mercado ou sua recepção ao mesmo e se a linguagem utilizada possui uma comunidade ativa para suporte;
    
    ANÁLISE DE CÓDIGOS:
        • Tipos de análise: Léxica, Sintaxe, Semântica;
            • Léxica: particionar, classificar e eliminar, função de ler o programa fonte caracter por caracter e agrupar caracteres e produzir uma sequencia de simbolos léxico, criando tokens (Identificadores, palavras reservadas, números, strings), Conteúdo relevante para programar e elimina elementos que não serão utilizados (espaços em brancos, comentários);
            • Sintaxe: Corretude do programa, depende da linguagem utilizada, análise para verificar componentes do sistema linguístico que interligam os constituintes da sentença, atribuindo-lhe uma estrutura;
            • Semântica: Lógica do programa (Significado do código, sua relação de cada item do código), análise de erros que o computador não localiza somente o usuário consegue identificar, bem complicado de se encontrar
    
    PARADIGMAS DA PROGRAMAÇÃO: Forma de resolução de problemas com diretrizes e limitações específicas de cada paradigma utilizando linguagem de programação, abaixo segue alguns dos paradigmas mais citados;
        • Orientação á objeto; (Mais utilizado: Python, Lua, C++, Java)
        • Procedural: Chamadas sucessivas e procedimento separados; (Lua, Fortran)
        • Funcional: Instruções são baseadas em funções; (Lua, JavaScript, Java, Python)
        • Estruturado: Estrutura de blocos alinhados; (Mais utilizado: C++, JavaScript, Java, C)
        • Computação distribuida: Funções executadas de forma independente; (Ada)
        • Lógico; (Java)

        • Paradigma Estrutura: Sequência, decisão (Teste lógico), interação (Funções, laços, condições), é utilizado para problemas simples e diretos, ótimo para aprendizado inicial.
        • Orientação á objeto: Paradigma de programação baseado na utilização de objetos e suas interações, análogo ao mundo real. Se orienta pelos atributos, métodos e estados do objeto.